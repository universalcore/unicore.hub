from datetime import datetime, timedelta

from mock import Mock

from unicore.hub.service.sso.tests import SSOTestCase
from unicore.hub.service.sso.models import Ticket, TICKET_RE, InvalidRequest


class TicketModelTestCase(SSOTestCase):

    def test_ticket_create(self):
        service = 'http://test.com'
        user = self.create_user(self.db, username='foo', password='password')
        self.db.flush()

        ticket1 = self.create_ticket(
            self.db, user_id=user.uuid, service=service)

        request = Mock()
        request.path_info = '/sso/login?service=%s' % service
        request.GET = {'service': service}
        request.db = self.db
        request.authenticated_userid = (user.uuid, )
        ticket2 = Ticket.create_ticket_from_request(request)
        self.db.flush()

        delattr(request, 'authenticated_userid')
        with self.assertRaises(InvalidRequest):
            Ticket.create_ticket_from_request(request)
        Ticket.create_ticket_from_request(request, user_id=user.uuid)

        for ticket in (ticket1, ticket2):
            self.assertTrue(TICKET_RE.match(ticket.ticket))
            self.assertTrue(ticket.user)
            self.assertGreater(ticket.expires, datetime.utcnow())
            self.assertEqual(ticket.consumed, None)
            self.assertEqual(ticket.primary, False)

    def test_ticket_basic_methods(self):
        service = 'http://test.com'
        user = self.create_user(self.db, username='foo', password='password')
        self.db.flush()
        ticket = self.create_ticket(
            self.db, user_id=user.uuid, service=service)
        self.db.flush()  # sets autogenerated values for ticket and expires

        self.assertFalse(ticket.is_consumed)
        self.assertFalse(ticket.is_expired)
        self.assertFalse(ticket.is_primary)

        ticket.expires = datetime.utcnow() - timedelta(days=1)
        self.assertTrue(ticket.is_expired)

        request = Mock()
        request.db = self.db
        ticket.consume(request)
        self.assertTrue(ticket.is_consumed)

        ticket.primary = True
        self.assertTrue(ticket.is_primary)

        tickets = [
            self.create_ticket(self.db, user_id=user.uuid, service=service)
            for i in range(10)]
        self.db.flush()
        for ticket in tickets:
            self.assertFalse(ticket.is_consumed)

        Ticket.consume_all(user.uuid, request)
        now = datetime.utcnow()
        for ticket in tickets:
            self.db.refresh(ticket)
            self.assertTrue(ticket.is_consumed)
            self.assertGreaterEqual(now, ticket.consumed)
